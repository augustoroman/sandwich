package main

import (
	"html/template"
	"net/http"

	"github.com/augustoroman/sandwich"
	auth "github.com/bradrydzewski/go.auth"
)

// THIS FILE IS AUTOMATICALLY GENERATED

func Auto_Home(
	taskDb TaskDb,
	pTemplate *template.Template,
) func(
	rw http.ResponseWriter,
	req *http.Request,
) {
	return func(
		rw http.ResponseWriter,
		req *http.Request,
	) {
		var pResponseWriter *sandwich.ResponseWriter
		rw, pResponseWriter = sandwich.WrapResponseWriter(rw)

		var pLogEntry *sandwich.LogEntry
		pLogEntry = sandwich.StartLog(req)

		defer func() {
			(*sandwich.LogEntry).Commit(pLogEntry, pResponseWriter)
		}()

		var user auth.User
		var userId UserId
		user, userId = ParseUserCookie(req)

		LogUser(user, pLogEntry)

		var err error
		err = Home(rw, req, userId, user, taskDb, pTemplate)
		if err != nil {
			sandwich.HandleError(rw, req, pLogEntry, err)
			return
		}

	}
}

func Auto_AddTask(
	taskDb TaskDb,
	pTemplate *template.Template,
) func(
	rw http.ResponseWriter,
	req *http.Request,
) {
	return func(
		rw http.ResponseWriter,
		req *http.Request,
	) {
		var pResponseWriter *sandwich.ResponseWriter
		rw, pResponseWriter = sandwich.WrapResponseWriter(rw)

		var pLogEntry *sandwich.LogEntry
		pLogEntry = sandwich.StartLog(req)

		defer func() {
			(*sandwich.LogEntry).Commit(pLogEntry, pResponseWriter)
		}()

		var user auth.User
		var userId UserId
		user, userId = ParseUserCookie(req)

		LogUser(user, pLogEntry)

		var err error
		err = RequireLoggedIn(user)
		if err != nil {
			sandwich.HandleErrorJson(rw, req, pLogEntry, err)
			return
		}

		err = AddTask(rw, req, userId, taskDb)
		if err != nil {
			sandwich.HandleErrorJson(rw, req, pLogEntry, err)
			return
		}

	}
}

func Auto_UpdateTask(
	taskDb TaskDb,
	pTemplate *template.Template,
) func(
	rw http.ResponseWriter,
	req *http.Request,
) {
	return func(
		rw http.ResponseWriter,
		req *http.Request,
	) {
		var pResponseWriter *sandwich.ResponseWriter
		rw, pResponseWriter = sandwich.WrapResponseWriter(rw)

		var pLogEntry *sandwich.LogEntry
		pLogEntry = sandwich.StartLog(req)

		defer func() {
			(*sandwich.LogEntry).Commit(pLogEntry, pResponseWriter)
		}()

		var user auth.User
		var userId UserId
		user, userId = ParseUserCookie(req)

		LogUser(user, pLogEntry)

		var err error
		err = RequireLoggedIn(user)
		if err != nil {
			sandwich.HandleErrorJson(rw, req, pLogEntry, err)
			return
		}

		err = UpdateTask(rw, req, userId, taskDb)
		if err != nil {
			sandwich.HandleErrorJson(rw, req, pLogEntry, err)
			return
		}

	}
}
